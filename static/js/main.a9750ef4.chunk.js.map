{"version":3,"sources":["ListItems.js","Firebase.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","console","log","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","faTrash","onClick","deleteItem","duration","easing","config","projectId","Firebase1","firebase","initializeApp","db","firestore","App","_retrieveData","a","quotes","Firebase","collection","get","forEach","quote","push","data","author","setState","isLoading","state","index","showNewQuoteScreen","currentItem","handldeInput","bind","addItem","this","Date","now","preventDefault","newItem","newItems","filteredItems","filter","init","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9750ef4.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n// import { faCoffee } from '@fortawesome/free-solid-svg-icons';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport FlipMove from 'react-flip-move';\n\n\nfunction ListItems(props) {\n    const items = props.items || [];\n    console.log(\"props from Listitems\")\n    console.log(items)\n    const ListItems = items.map(item => {\n        return (\n            <div className=\"list\" key={item.key}>\n                <p>\n                    <input type=\"text\"\n                    id={item.key}\n                    value={item.text}\n                    onChange = {\n                        (e)=>{\n                            props.setUpdate(e.target.value, item.key)\n                        }\n                    }\n                    />\n                <span>\n                    <FontAwesomeIcon className=\"faicons\"\n                    icon={faTrash}\n                    onClick={()=> props.deleteItem(item.key)}/>\n                </span>\n                </p>\n                \n            </div>\n        )\n    })\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n            {ListItems}\n            </FlipMove>\n        </div>\n    )\n}\n\nexport default ListItems;\n","import firebase from 'firebase';\nimport 'firebase/firestore';\n\n// chỗ này khai báo thông tin kết nối Firebase \nconst config = {\n  \n  // apiKey: 'AIzaSyA4KhjrlLQCGvE-_WowIWK89fBwaKBuafs',\n  // authDomain: 'AUTHDOMAIN',\n  // databaseURL: 'https://quoteapp-e7710.firebaseio.com',\n  projectId: 'quoteapp-e7710',\n  // storageBucket: 'gs://quoteapp-e7710.appspot.com',\n  // messagingSenderId: 'MESSAGINGSENDERID',\n  // appId: 'uhouse-2e259'\n};\n\nexport default class Firebase1 {\n  static db;\n\n  static init() {\n    firebase.initializeApp(config);\n    Firebase1.db = firebase.firestore();\n  }\n}","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\n// import FlipMove from 'react-flip-move';\n// import {library} from '@fortawesome/fontawesome-svg-core';\n// import {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport Firebase from './Firebase';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      index: 0, showNewQuoteScreen: false, quotes: [], isLoading: true,\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      },\n    }\n    this.handldeInput = this.handldeInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  _retrieveData = async () => {\n    let quotes = [];\n    let query = await Firebase.db.collection('quotes').get();\n    query.forEach(quote => {\n      quotes.push({\n        id: quote.id,\n        text: quote.data().text,\n        author: quote.data().author\n      });\n    });\n    this.setState({ quotes, isLoading: false },()=>console.log(this.state.quotes));\n  };\n\n  handldeInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n    console.log(this.state.currentItem)\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    // console.log('added')\n    // console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newItems=[...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      });\n      console.log(newItems)\n\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item=>\n      item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item=>{\n      if(item.key === key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n\n  }\n\n\n  //\n  componentDidMount() {\n    Firebase.init();\n    this._retrieveData();\n    console.log(this.state.quotes)\n  }\n\n  \n\n  render(){\n\n//     // list quotes\n//   const ListItems = this.quotes.map(item => {\n//     return (\n//         <div key={item.id}>\n//             <p>\n//                 <input type=\"text\"\n//                 id={item.key}\n//                 value={item.text}\n                \n//                 />\n//             <span>\n//                 <FontAwesomeIcon className=\"faicons\"\n//                 // icon={faTrash}\n//                 // onClick={()=> props.deleteItem(item.key)}\n//                 />\n//             </span>\n//             </p>\n            \n//         </div>\n//     )\n// })\n\n    return (\n      <div className=\"App\">\n        <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter Text\"\n          value={this.state.currentItem.text}\n          onChange={this.handldeInput}/>\n          <button type=\"submit\">Add</button>\n        </form>\n        <ListItems items={this.state.items}\n        deleteItem = {this.deleteItem}\n        setUpdate= {this.setUpdate}\n        />\n         \n        <h1>{this.state.quotes.map(item=>{\n          return(\n          // <p>{item.id}</p>\n          <input type=\"text\"\n                id={item.id}\n                value={item.text}\n                \n                />\n          )\n          \n\n        })}</h1>\n\n      </header>\n      </div>\n      )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}